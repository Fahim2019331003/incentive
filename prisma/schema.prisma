generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// model Collection {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   User   User?   @relation(fields: [userId], references: [id])
//   userId String? @db.ObjectId
// }

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  verified       Boolean   @default(false)
  role           Role      @default(APPLICANT)
  department     String?
  designation    String?
  bankinfo       String?

  accounts              Account[]
  // collections           Collection[]
  asApplicant           Application[]  @relation("Applicant")
  asCorrespondingAuthor Application[]  @relation("CorrespondingAuthor")
  notification          Notification[] @relation("Notification")
  asEvaluator           Evaluation[]   @relation("EvaluationBy")
  incentive             Incentive?     @relation("Incentive")
  // asUpdatedBy Application[] @relation("UpdatedBy")
  // asAffiliated Application[] @relation("AffiliatedPerson")
}


model Application {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  department              String
  school                  String
  title                   String
  qIndex                  QIndex
  PublishernameAndAddress String
  volAndDate              String

  awardDetails            String?
  patentDetails           String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  status                  Status?  @default(PENDING)

  correspondingAuthorId String?       @db.ObjectId
  correspondingAuthor   User?        @relation("CorrespondingAuthor", fields: [correspondingAuthorId], references: [id])
  applicantId           String?      @db.ObjectId
  applicant             User?         @relation("Applicant", fields: [applicantId], references: [id])
  evaluations           Evaluation[] @relation("Evaluation")
  affiliaterPersons     String[]
  updatedBy             String[]
  payments              Payment[]    @relation("ApplicationFor")

}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  slug      String
  type      String
  createdAt DateTime @default(now())

  notificationForId String @db.ObjectId

  notificationFor   User   @relation("Notification", fields: [notificationForId], references: [id])
}

model Evaluation {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  feedback String?
  status   Boolean?

  evaluationId  String       @db.ObjectId
  evaluatedBy   User?        @relation("EvaluationBy", fields: [evaluationId], references: [id])
  applicationId String       @db.ObjectId
  evaluation    Application? @relation("Evaluation", fields: [evaluationId], references: [id])
}

model Incentive {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  totalPayment String?
  totalPaid    String?

  incentiveForId String?   @unique @db.ObjectId
  incentiveFor   User?     @relation("Incentive", fields: [incentiveForId], references: [id])
  payments       Payment[] @relation("Payments")

  // @@unique([incentiveForId, applicationId])
}

model Payment {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  amount           String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  incentiveToId    String       @db.ObjectId
  incentiveTo      Incentive?   @relation("Payments", fields: [incentiveToId], references: [id])
  applicationForId String       @db.ObjectId
  application      Application? @relation("ApplicationFor", fields: [applicationForId], references: [id])

}

enum Status {
  PENDING
  PROCESSING
  ACCEPTED
  REJECTED
}

enum QIndex {
  Q1
  Q2
  Q3
  Q4
}

enum Role {
  APPLICANT
  ADMIN
  COORDINATOR
  EVALUATOR
}
